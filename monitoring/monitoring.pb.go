// Code generated by protoc-gen-go.
// source: monitoring.proto
// DO NOT EDIT!

/*
Package monitoring is a generated protocol buffer package.

It is generated from these files:
	monitoring.proto

It has these top-level messages:
	InfosServer
	InfosCpu
	Partitions
	InfosConsumeDisk
	InfosMemory
	InfosConsume
	ShowConsume
	ShowConsumeDisk
	Empty
*/
package monitoring

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InfosServer struct {
	Memory *InfosMemory `protobuf:"bytes,1,opt,name=memory" json:"memory,omitempty"`
	Cpu    *InfosCpu    `protobuf:"bytes,2,opt,name=cpu" json:"cpu,omitempty"`
}

func (m *InfosServer) Reset()                    { *m = InfosServer{} }
func (m *InfosServer) String() string            { return proto.CompactTextString(m) }
func (*InfosServer) ProtoMessage()               {}
func (*InfosServer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *InfosServer) GetMemory() *InfosMemory {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *InfosServer) GetCpu() *InfosCpu {
	if m != nil {
		return m.Cpu
	}
	return nil
}

type InfosCpu struct {
	PerCpu   []float64 `protobuf:"fixed64,1,rep,packed,name=per_cpu,json=perCpu" json:"per_cpu,omitempty"`
	TotalCpu float64   `protobuf:"fixed64,2,opt,name=total_cpu,json=totalCpu" json:"total_cpu,omitempty"`
}

func (m *InfosCpu) Reset()                    { *m = InfosCpu{} }
func (m *InfosCpu) String() string            { return proto.CompactTextString(m) }
func (*InfosCpu) ProtoMessage()               {}
func (*InfosCpu) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InfosCpu) GetPerCpu() []float64 {
	if m != nil {
		return m.PerCpu
	}
	return nil
}

func (m *InfosCpu) GetTotalCpu() float64 {
	if m != nil {
		return m.TotalCpu
	}
	return 0
}

type Partitions struct {
	Device            string  `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	Mounted           string  `protobuf:"bytes,2,opt,name=mounted" json:"mounted,omitempty"`
	Fstype            string  `protobuf:"bytes,3,opt,name=fstype" json:"fstype,omitempty"`
	Size              uint64  `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	Free              uint64  `protobuf:"varint,5,opt,name=free" json:"free,omitempty"`
	Used              uint64  `protobuf:"varint,6,opt,name=used" json:"used,omitempty"`
	UsedPercent       float64 `protobuf:"fixed64,7,opt,name=used_percent,json=usedPercent" json:"used_percent,omitempty"`
	InodesTotal       uint64  `protobuf:"varint,8,opt,name=inodes_total,json=inodesTotal" json:"inodes_total,omitempty"`
	InodesUsed        uint64  `protobuf:"varint,9,opt,name=inodes_used,json=inodesUsed" json:"inodes_used,omitempty"`
	InodesFree        uint64  `protobuf:"varint,10,opt,name=inodes_free,json=inodesFree" json:"inodes_free,omitempty"`
	InodesUsedPercent float64 `protobuf:"fixed64,11,opt,name=inodes_used_percent,json=inodesUsedPercent" json:"inodes_used_percent,omitempty"`
}

func (m *Partitions) Reset()                    { *m = Partitions{} }
func (m *Partitions) String() string            { return proto.CompactTextString(m) }
func (*Partitions) ProtoMessage()               {}
func (*Partitions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Partitions) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *Partitions) GetMounted() string {
	if m != nil {
		return m.Mounted
	}
	return ""
}

func (m *Partitions) GetFstype() string {
	if m != nil {
		return m.Fstype
	}
	return ""
}

func (m *Partitions) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Partitions) GetFree() uint64 {
	if m != nil {
		return m.Free
	}
	return 0
}

func (m *Partitions) GetUsed() uint64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *Partitions) GetUsedPercent() float64 {
	if m != nil {
		return m.UsedPercent
	}
	return 0
}

func (m *Partitions) GetInodesTotal() uint64 {
	if m != nil {
		return m.InodesTotal
	}
	return 0
}

func (m *Partitions) GetInodesUsed() uint64 {
	if m != nil {
		return m.InodesUsed
	}
	return 0
}

func (m *Partitions) GetInodesFree() uint64 {
	if m != nil {
		return m.InodesFree
	}
	return 0
}

func (m *Partitions) GetInodesUsedPercent() float64 {
	if m != nil {
		return m.InodesUsedPercent
	}
	return 0
}

type InfosConsumeDisk struct {
	Device          string  `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	ReadsComplete   float64 `protobuf:"fixed64,2,opt,name=reads_complete,json=readsComplete" json:"reads_complete,omitempty"`
	ReadsMerged     uint64  `protobuf:"varint,3,opt,name=reads_merged,json=readsMerged" json:"reads_merged,omitempty"`
	SectorsRead     uint64  `protobuf:"varint,4,opt,name=sectors_read,json=sectorsRead" json:"sectors_read,omitempty"`
	TimeSpentRead   uint64  `protobuf:"varint,5,opt,name=time_spent_read,json=timeSpentRead" json:"time_spent_read,omitempty"`
	WritesCompleted float64 `protobuf:"fixed64,6,opt,name=writes_completed,json=writesCompleted" json:"writes_completed,omitempty"`
	WritesMerged    uint64  `protobuf:"varint,7,opt,name=writes_merged,json=writesMerged" json:"writes_merged,omitempty"`
	SectorsWrite    uint64  `protobuf:"varint,8,opt,name=sectors_write,json=sectorsWrite" json:"sectors_write,omitempty"`
	TimeSpentWrite  uint64  `protobuf:"varint,9,opt,name=time_spent_write,json=timeSpentWrite" json:"time_spent_write,omitempty"`
	Io              uint64  `protobuf:"varint,10,opt,name=io" json:"io,omitempty"`
}

func (m *InfosConsumeDisk) Reset()                    { *m = InfosConsumeDisk{} }
func (m *InfosConsumeDisk) String() string            { return proto.CompactTextString(m) }
func (*InfosConsumeDisk) ProtoMessage()               {}
func (*InfosConsumeDisk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *InfosConsumeDisk) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *InfosConsumeDisk) GetReadsComplete() float64 {
	if m != nil {
		return m.ReadsComplete
	}
	return 0
}

func (m *InfosConsumeDisk) GetReadsMerged() uint64 {
	if m != nil {
		return m.ReadsMerged
	}
	return 0
}

func (m *InfosConsumeDisk) GetSectorsRead() uint64 {
	if m != nil {
		return m.SectorsRead
	}
	return 0
}

func (m *InfosConsumeDisk) GetTimeSpentRead() uint64 {
	if m != nil {
		return m.TimeSpentRead
	}
	return 0
}

func (m *InfosConsumeDisk) GetWritesCompleted() float64 {
	if m != nil {
		return m.WritesCompleted
	}
	return 0
}

func (m *InfosConsumeDisk) GetWritesMerged() uint64 {
	if m != nil {
		return m.WritesMerged
	}
	return 0
}

func (m *InfosConsumeDisk) GetSectorsWrite() uint64 {
	if m != nil {
		return m.SectorsWrite
	}
	return 0
}

func (m *InfosConsumeDisk) GetTimeSpentWrite() uint64 {
	if m != nil {
		return m.TimeSpentWrite
	}
	return 0
}

func (m *InfosConsumeDisk) GetIo() uint64 {
	if m != nil {
		return m.Io
	}
	return 0
}

type InfosMemory struct {
	Total       uint64  `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Free        uint64  `protobuf:"varint,2,opt,name=free" json:"free,omitempty"`
	Available   uint64  `protobuf:"varint,3,opt,name=available" json:"available,omitempty"`
	Used        uint64  `protobuf:"varint,4,opt,name=used" json:"used,omitempty"`
	Cached      uint64  `protobuf:"varint,5,opt,name=cached" json:"cached,omitempty"`
	UsedPercent float32 `protobuf:"fixed32,6,opt,name=used_percent,json=usedPercent" json:"used_percent,omitempty"`
}

func (m *InfosMemory) Reset()                    { *m = InfosMemory{} }
func (m *InfosMemory) String() string            { return proto.CompactTextString(m) }
func (*InfosMemory) ProtoMessage()               {}
func (*InfosMemory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *InfosMemory) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *InfosMemory) GetFree() uint64 {
	if m != nil {
		return m.Free
	}
	return 0
}

func (m *InfosMemory) GetAvailable() uint64 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *InfosMemory) GetUsed() uint64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *InfosMemory) GetCached() uint64 {
	if m != nil {
		return m.Cached
	}
	return 0
}

func (m *InfosMemory) GetUsedPercent() float32 {
	if m != nil {
		return m.UsedPercent
	}
	return 0
}

type InfosConsume struct {
	Interface   string  `protobuf:"bytes,1,opt,name=interface" json:"interface,omitempty"`
	Sent        float64 `protobuf:"fixed64,2,opt,name=sent" json:"sent,omitempty"`
	Recv        float64 `protobuf:"fixed64,3,opt,name=recv" json:"recv,omitempty"`
	PacketsSent uint64  `protobuf:"varint,4,opt,name=packets_sent,json=packetsSent" json:"packets_sent,omitempty"`
	PacketsRecv uint64  `protobuf:"varint,5,opt,name=packets_recv,json=packetsRecv" json:"packets_recv,omitempty"`
	ErrorRecv   uint64  `protobuf:"varint,6,opt,name=error_recv,json=errorRecv" json:"error_recv,omitempty"`
	ErrorSent   uint64  `protobuf:"varint,7,opt,name=error_sent,json=errorSent" json:"error_sent,omitempty"`
	DropRecv    uint64  `protobuf:"varint,8,opt,name=drop_recv,json=dropRecv" json:"drop_recv,omitempty"`
	DropSent    uint64  `protobuf:"varint,9,opt,name=drop_sent,json=dropSent" json:"drop_sent,omitempty"`
}

func (m *InfosConsume) Reset()                    { *m = InfosConsume{} }
func (m *InfosConsume) String() string            { return proto.CompactTextString(m) }
func (*InfosConsume) ProtoMessage()               {}
func (*InfosConsume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *InfosConsume) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *InfosConsume) GetSent() float64 {
	if m != nil {
		return m.Sent
	}
	return 0
}

func (m *InfosConsume) GetRecv() float64 {
	if m != nil {
		return m.Recv
	}
	return 0
}

func (m *InfosConsume) GetPacketsSent() uint64 {
	if m != nil {
		return m.PacketsSent
	}
	return 0
}

func (m *InfosConsume) GetPacketsRecv() uint64 {
	if m != nil {
		return m.PacketsRecv
	}
	return 0
}

func (m *InfosConsume) GetErrorRecv() uint64 {
	if m != nil {
		return m.ErrorRecv
	}
	return 0
}

func (m *InfosConsume) GetErrorSent() uint64 {
	if m != nil {
		return m.ErrorSent
	}
	return 0
}

func (m *InfosConsume) GetDropRecv() uint64 {
	if m != nil {
		return m.DropRecv
	}
	return 0
}

func (m *InfosConsume) GetDropSent() uint64 {
	if m != nil {
		return m.DropSent
	}
	return 0
}

type ShowConsume struct {
	Consume []*InfosConsume `protobuf:"bytes,1,rep,name=consume" json:"consume,omitempty"`
}

func (m *ShowConsume) Reset()                    { *m = ShowConsume{} }
func (m *ShowConsume) String() string            { return proto.CompactTextString(m) }
func (*ShowConsume) ProtoMessage()               {}
func (*ShowConsume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ShowConsume) GetConsume() []*InfosConsume {
	if m != nil {
		return m.Consume
	}
	return nil
}

type ShowConsumeDisk struct {
	DiskIo []*InfosConsumeDisk `protobuf:"bytes,1,rep,name=disk_io,json=diskIo" json:"disk_io,omitempty"`
}

func (m *ShowConsumeDisk) Reset()                    { *m = ShowConsumeDisk{} }
func (m *ShowConsumeDisk) String() string            { return proto.CompactTextString(m) }
func (*ShowConsumeDisk) ProtoMessage()               {}
func (*ShowConsumeDisk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ShowConsumeDisk) GetDiskIo() []*InfosConsumeDisk {
	if m != nil {
		return m.DiskIo
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*InfosServer)(nil), "monitoring.InfosServer")
	proto.RegisterType((*InfosCpu)(nil), "monitoring.InfosCpu")
	proto.RegisterType((*Partitions)(nil), "monitoring.Partitions")
	proto.RegisterType((*InfosConsumeDisk)(nil), "monitoring.InfosConsumeDisk")
	proto.RegisterType((*InfosMemory)(nil), "monitoring.InfosMemory")
	proto.RegisterType((*InfosConsume)(nil), "monitoring.InfosConsume")
	proto.RegisterType((*ShowConsume)(nil), "monitoring.ShowConsume")
	proto.RegisterType((*ShowConsumeDisk)(nil), "monitoring.ShowConsumeDisk")
	proto.RegisterType((*Empty)(nil), "monitoring.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MonitoringService service

type MonitoringServiceClient interface {
	// rpc AllInfos(Empty) returns (stream InfosServer) {}
	CpuInfos(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MonitoringService_CpuInfosClient, error)
	ConsumeInterfaces(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MonitoringService_ConsumeInterfacesClient, error)
	ConsumeDisk(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MonitoringService_ConsumeDiskClient, error)
}

type monitoringServiceClient struct {
	cc *grpc.ClientConn
}

func NewMonitoringServiceClient(cc *grpc.ClientConn) MonitoringServiceClient {
	return &monitoringServiceClient{cc}
}

func (c *monitoringServiceClient) CpuInfos(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MonitoringService_CpuInfosClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringService_serviceDesc.Streams[0], c.cc, "/monitoring.MonitoringService/CpuInfos", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringServiceCpuInfosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringService_CpuInfosClient interface {
	Recv() (*InfosCpu, error)
	grpc.ClientStream
}

type monitoringServiceCpuInfosClient struct {
	grpc.ClientStream
}

func (x *monitoringServiceCpuInfosClient) Recv() (*InfosCpu, error) {
	m := new(InfosCpu)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringServiceClient) ConsumeInterfaces(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MonitoringService_ConsumeInterfacesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringService_serviceDesc.Streams[1], c.cc, "/monitoring.MonitoringService/ConsumeInterfaces", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringServiceConsumeInterfacesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringService_ConsumeInterfacesClient interface {
	Recv() (*ShowConsume, error)
	grpc.ClientStream
}

type monitoringServiceConsumeInterfacesClient struct {
	grpc.ClientStream
}

func (x *monitoringServiceConsumeInterfacesClient) Recv() (*ShowConsume, error) {
	m := new(ShowConsume)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitoringServiceClient) ConsumeDisk(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MonitoringService_ConsumeDiskClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MonitoringService_serviceDesc.Streams[2], c.cc, "/monitoring.MonitoringService/ConsumeDisk", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringServiceConsumeDiskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitoringService_ConsumeDiskClient interface {
	Recv() (*ShowConsumeDisk, error)
	grpc.ClientStream
}

type monitoringServiceConsumeDiskClient struct {
	grpc.ClientStream
}

func (x *monitoringServiceConsumeDiskClient) Recv() (*ShowConsumeDisk, error) {
	m := new(ShowConsumeDisk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MonitoringService service

type MonitoringServiceServer interface {
	// rpc AllInfos(Empty) returns (stream InfosServer) {}
	CpuInfos(*Empty, MonitoringService_CpuInfosServer) error
	ConsumeInterfaces(*Empty, MonitoringService_ConsumeInterfacesServer) error
	ConsumeDisk(*Empty, MonitoringService_ConsumeDiskServer) error
}

func RegisterMonitoringServiceServer(s *grpc.Server, srv MonitoringServiceServer) {
	s.RegisterService(&_MonitoringService_serviceDesc, srv)
}

func _MonitoringService_CpuInfos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringServiceServer).CpuInfos(m, &monitoringServiceCpuInfosServer{stream})
}

type MonitoringService_CpuInfosServer interface {
	Send(*InfosCpu) error
	grpc.ServerStream
}

type monitoringServiceCpuInfosServer struct {
	grpc.ServerStream
}

func (x *monitoringServiceCpuInfosServer) Send(m *InfosCpu) error {
	return x.ServerStream.SendMsg(m)
}

func _MonitoringService_ConsumeInterfaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringServiceServer).ConsumeInterfaces(m, &monitoringServiceConsumeInterfacesServer{stream})
}

type MonitoringService_ConsumeInterfacesServer interface {
	Send(*ShowConsume) error
	grpc.ServerStream
}

type monitoringServiceConsumeInterfacesServer struct {
	grpc.ServerStream
}

func (x *monitoringServiceConsumeInterfacesServer) Send(m *ShowConsume) error {
	return x.ServerStream.SendMsg(m)
}

func _MonitoringService_ConsumeDisk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringServiceServer).ConsumeDisk(m, &monitoringServiceConsumeDiskServer{stream})
}

type MonitoringService_ConsumeDiskServer interface {
	Send(*ShowConsumeDisk) error
	grpc.ServerStream
}

type monitoringServiceConsumeDiskServer struct {
	grpc.ServerStream
}

func (x *monitoringServiceConsumeDiskServer) Send(m *ShowConsumeDisk) error {
	return x.ServerStream.SendMsg(m)
}

var _MonitoringService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monitoring.MonitoringService",
	HandlerType: (*MonitoringServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CpuInfos",
			Handler:       _MonitoringService_CpuInfos_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConsumeInterfaces",
			Handler:       _MonitoringService_ConsumeInterfaces_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConsumeDisk",
			Handler:       _MonitoringService_ConsumeDisk_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "monitoring.proto",
}

func init() { proto.RegisterFile("monitoring.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 834 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x55, 0xcd, 0x6e, 0xe4, 0x44,
	0x10, 0x96, 0x9d, 0xc9, 0xcc, 0xb8, 0x9c, 0xdf, 0x66, 0x95, 0xb5, 0x36, 0x61, 0x09, 0x5e, 0x58,
	0x85, 0x4b, 0x66, 0x09, 0xe2, 0x0e, 0x04, 0x10, 0x39, 0x44, 0x5a, 0x39, 0xac, 0x90, 0xb8, 0x58,
	0x5e, 0xbb, 0x66, 0xb6, 0x95, 0xb1, 0xdb, 0xea, 0xee, 0x99, 0x55, 0x38, 0xf2, 0x08, 0xf0, 0x0a,
	0x3c, 0x02, 0x4f, 0xc1, 0x95, 0x57, 0xe0, 0xcc, 0x33, 0xa0, 0xaa, 0x6e, 0xcf, 0x38, 0x9a, 0x84,
	0x93, 0xbb, 0xbf, 0xfe, 0xaa, 0xea, 0xeb, 0xfa, 0x69, 0xc3, 0x41, 0xad, 0x1a, 0x69, 0x95, 0x96,
	0xcd, 0xec, 0xbc, 0xd5, 0xca, 0x2a, 0x01, 0x6b, 0xe4, 0xd9, 0xc9, 0x4c, 0xa9, 0xd9, 0x1c, 0x27,
	0x45, 0x2b, 0x27, 0x45, 0xd3, 0x28, 0x5b, 0x58, 0xa9, 0x1a, 0xe3, 0x98, 0xe9, 0x14, 0xe2, 0xab,
	0x66, 0xaa, 0xcc, 0x0d, 0xea, 0x25, 0x6a, 0x31, 0x81, 0x61, 0x8d, 0xb5, 0xd2, 0x77, 0x49, 0x70,
	0x1a, 0x9c, 0xc5, 0x17, 0x4f, 0xcf, 0x7b, 0xbe, 0x99, 0x78, 0xcd, 0xc7, 0x99, 0xa7, 0x89, 0x97,
	0xb0, 0x55, 0xb6, 0x8b, 0x24, 0x64, 0xf6, 0x93, 0x0d, 0xf6, 0x65, 0xbb, 0xc8, 0x88, 0x90, 0x7e,
	0x05, 0xe3, 0x0e, 0x10, 0x4f, 0x61, 0xd4, 0xa2, 0xce, 0xc9, 0x2e, 0x38, 0xdd, 0x3a, 0x0b, 0xb2,
	0x61, 0x8b, 0x9a, 0x0e, 0x8e, 0x21, 0xb2, 0xca, 0x16, 0xf3, 0xbc, 0x73, 0x19, 0x64, 0x63, 0x06,
	0x2e, 0xdb, 0x45, 0xfa, 0x57, 0x08, 0xf0, 0xba, 0xd0, 0x56, 0xb2, 0x7c, 0x71, 0x04, 0xc3, 0x0a,
	0x97, 0xb2, 0x44, 0x56, 0x1a, 0x65, 0x7e, 0x27, 0x12, 0x18, 0xd5, 0x6a, 0xd1, 0x58, 0xac, 0xd8,
	0x43, 0x94, 0x75, 0x5b, 0xb2, 0x98, 0x1a, 0x7b, 0xd7, 0x62, 0xb2, 0xe5, 0x2c, 0xdc, 0x4e, 0x08,
	0x18, 0x18, 0xf9, 0x0b, 0x26, 0x83, 0xd3, 0xe0, 0x6c, 0x90, 0xf1, 0x9a, 0xb0, 0xa9, 0x46, 0x4c,
	0xb6, 0x1d, 0x46, 0x6b, 0xc2, 0x16, 0x06, 0xab, 0x64, 0xe8, 0x30, 0x5a, 0x8b, 0x8f, 0x61, 0x87,
	0xbe, 0x79, 0x8b, 0xba, 0xc4, 0xc6, 0x26, 0x23, 0x16, 0x1d, 0x13, 0xf6, 0xda, 0x41, 0x44, 0x91,
	0x8d, 0xaa, 0xd0, 0xe4, 0x7c, 0x95, 0x64, 0xcc, 0xe6, 0xb1, 0xc3, 0x7e, 0x24, 0x48, 0x7c, 0x04,
	0x7e, 0x9b, 0x73, 0x80, 0x88, 0x19, 0xe0, 0xa0, 0x37, 0x14, 0x66, 0x4d, 0x60, 0x55, 0xd0, 0x27,
	0x7c, 0x4f, 0xda, 0xce, 0xe1, 0x83, 0x9e, 0x87, 0x95, 0x9c, 0x98, 0xe5, 0x1c, 0xae, 0x3d, 0x79,
	0x51, 0xe9, 0xbf, 0x21, 0x1c, 0xb8, 0x7a, 0xa8, 0xc6, 0x2c, 0x6a, 0xfc, 0x56, 0x9a, 0xdb, 0x47,
	0x53, 0xfa, 0x29, 0xec, 0x69, 0x2c, 0x2a, 0x93, 0x97, 0xaa, 0x6e, 0xe7, 0x68, 0xd1, 0xd7, 0x66,
	0x97, 0xd1, 0x4b, 0x0f, 0xd2, 0x45, 0x1d, 0xad, 0x46, 0x3d, 0xc3, 0x8a, 0xb3, 0x3c, 0xc8, 0x62,
	0xc6, 0xae, 0x19, 0x22, 0x8a, 0xc1, 0xd2, 0x2a, 0x6d, 0x72, 0x82, 0x7d, 0xca, 0x63, 0x8f, 0x65,
	0x58, 0x54, 0xe2, 0x25, 0xec, 0x5b, 0x59, 0x63, 0x6e, 0x5a, 0x6c, 0xac, 0x63, 0xb9, 0x22, 0xec,
	0x12, 0x7c, 0x43, 0x28, 0xf3, 0x3e, 0x83, 0x83, 0xf7, 0x5a, 0x5a, 0x5c, 0xab, 0x72, 0x95, 0x09,
	0xb2, 0x7d, 0x87, 0x77, 0xba, 0x2a, 0xf1, 0x02, 0x76, 0x3d, 0xd5, 0x2b, 0x1b, 0xb1, 0xc3, 0x1d,
	0x07, 0x7a, 0x69, 0x2f, 0x60, 0xb7, 0x93, 0xc6, 0xb8, 0xaf, 0x53, 0xa7, 0xf7, 0x27, 0xc2, 0xc4,
	0x19, 0x1c, 0xf4, 0xc4, 0x39, 0x9e, 0xab, 0xd6, 0xde, 0x4a, 0x9d, 0x63, 0xee, 0x41, 0x28, 0x95,
	0x2f, 0x54, 0x28, 0x55, 0xfa, 0x47, 0xe0, 0x07, 0xcd, 0xcd, 0x8f, 0x78, 0x02, 0xdb, 0xae, 0x1d,
	0x02, 0xa6, 0xb8, 0xcd, 0xaa, 0xed, 0xc2, 0x5e, 0xdb, 0x9d, 0x40, 0x54, 0x2c, 0x0b, 0x39, 0x2f,
	0xde, 0xce, 0xd1, 0xe7, 0x74, 0x0d, 0xac, 0x9a, 0x72, 0xd0, 0x6b, 0xca, 0x23, 0x18, 0x96, 0x45,
	0xf9, 0x0e, 0xbb, 0xcc, 0xf9, 0xdd, 0x46, 0xb3, 0x52, 0xba, 0xc2, 0x7b, 0xcd, 0x9a, 0xfe, 0x16,
	0xc2, 0x4e, 0xbf, 0x2f, 0x28, 0xba, 0x6c, 0x2c, 0xea, 0x69, 0xb1, 0x6a, 0x8b, 0x35, 0xc0, 0xa3,
	0x43, 0x9e, 0x5c, 0x3f, 0xf0, 0x9a, 0x30, 0x8d, 0xe5, 0x92, 0xa5, 0x06, 0x19, 0xaf, 0x29, 0x72,
	0x5b, 0x94, 0xb7, 0x68, 0x4d, 0xce, 0x7c, 0x5f, 0x77, 0x8f, 0xdd, 0xf8, 0x31, 0xe9, 0x28, 0x6c,
	0xbe, 0x7d, 0x8f, 0x92, 0x91, 0x97, 0x0f, 0x01, 0x50, 0x6b, 0xa5, 0x1d, 0xc1, 0x8d, 0x61, 0xc4,
	0xc8, 0xfd, 0x63, 0xd3, 0x4d, 0x62, 0x77, 0xcc, 0x01, 0x8e, 0x21, 0xaa, 0xb4, 0x6a, 0x9d, 0xb1,
	0x2b, 0xee, 0x98, 0x00, 0xb6, 0xed, 0x0e, 0xd9, 0x34, 0x5a, 0x1f, 0x92, 0x65, 0xfa, 0x35, 0xc4,
	0x37, 0xef, 0xd4, 0xfb, 0x2e, 0x25, 0x17, 0x30, 0x2a, 0xdd, 0x92, 0x9f, 0xaf, 0xf8, 0x22, 0xd9,
	0x7c, 0xf6, 0xdc, 0x79, 0xd6, 0x11, 0xd3, 0x1f, 0x60, 0xbf, 0xe7, 0x82, 0xa7, 0xed, 0x4b, 0x18,
	0x55, 0xd2, 0xdc, 0xe6, 0x52, 0x79, 0x37, 0x27, 0x8f, 0xb9, 0x21, 0x7a, 0x36, 0x24, 0xf2, 0x95,
	0x4a, 0x47, 0xb0, 0xfd, 0x5d, 0xdd, 0xda, 0xbb, 0x8b, 0x3f, 0x43, 0x38, 0xbc, 0x5e, 0x19, 0xd0,
	0xfb, 0x4d, 0xb3, 0xfa, 0x06, 0xc6, 0x97, 0xed, 0x82, 0xad, 0xc5, 0x61, 0xdf, 0x21, 0x1b, 0x3d,
	0x7b, 0xf0, 0x85, 0x4e, 0x9f, 0xff, 0xfa, 0xf7, 0x3f, 0xbf, 0x87, 0x89, 0x38, 0x9a, 0x2c, 0x3f,
	0x9f, 0x48, 0x42, 0x27, 0x5e, 0x38, 0xbd, 0xc4, 0xe6, 0x55, 0x20, 0x66, 0x70, 0xe8, 0xc5, 0x5c,
	0x75, 0xc5, 0x7f, 0xd0, 0xff, 0xbd, 0xff, 0x45, 0xef, 0xc6, 0xe9, 0x27, 0x1c, 0xe2, 0xb9, 0x38,
	0xd9, 0x0c, 0xb1, 0x6a, 0x27, 0x0a, 0x94, 0x43, 0xdc, 0x4f, 0xd2, 0x03, 0x21, 0x8e, 0x1f, 0x09,
	0x41, 0xfc, 0xff, 0xbb, 0x09, 0xe5, 0xef, 0x55, 0xf0, 0xcd, 0xce, 0xcf, 0xbd, 0x9f, 0xe3, 0xdb,
	0x21, 0xff, 0x05, 0xbf, 0xf8, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x95, 0x23, 0x8d, 0x43, 0x07,
	0x00, 0x00,
}
